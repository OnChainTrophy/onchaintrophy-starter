/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 tropy.glb -t 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    wing1: THREE.Mesh
    wing2: THREE.Mesh
    bottom1: THREE.Mesh
    bottom2: THREE.Mesh
    bottom3: THREE.Mesh
    Cylinder: THREE.Mesh
  }
  materials: {
    logotop: THREE.MeshStandardMaterial
    logoedges: THREE.MeshStandardMaterial
    sidemesh: THREE.MeshStandardMaterial
    topandbottom: THREE.MeshStandardMaterial
    interior: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/tropy.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[0, 2, 0]}>
        <mesh geometry={nodes.wing1.geometry} material={materials.logotop} />
        <mesh geometry={nodes.wing2.geometry} material={materials.logoedges} />
      </group>
      <group position={[0, 2, 0]} scale={0.8}>
        <mesh geometry={nodes.bottom1.geometry} material={materials.sidemesh} />
        <mesh geometry={nodes.bottom2.geometry} material={materials.topandbottom} />
        <mesh geometry={nodes.bottom3.geometry} material={materials.interior} />
      </group>
      <pointLight intensity={1} decay={2} distance={1.02} position={[-0.651, 1.899, 0.311]} />
      <pointLight intensity={1} decay={2} position={[0, 4, 0]} />
      <mesh geometry={nodes.Cylinder.geometry} material={nodes.Cylinder.material} position={[0, 1, 0]} scale={[0.5, 2, 0.5]} />
    </group>
  )
}

useGLTF.preload('/tropy.glb')
